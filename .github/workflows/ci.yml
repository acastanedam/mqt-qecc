name: C++

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 3

defaults:
  run:
    shell: bash

jobs:
  cpp-tests:
    name: Tests ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            os: ubuntu-20.04,
            test-dir: build/test,
            toolchain: "",
            mpfr-install-cmd: "sudo apt-get install libmpfr-dev"
          }
          - {
            os: macos-11,
            test-dir: build/test,
            toolchain: "",
            mpfr-install-cmd: "brew install mpfr"
          }
          - {
            os: windows-2022,
            test-dir: build\test\Release,
            toolchain: "-T ClangCl",
            mpfr-install-cmd: ""
          }
    steps:
      - name: Cache FLINT
        id: cache-flint2
        uses: actions/cache@v3
        with:
          path: flint2
          key: ci-${{ runner.OS }}-${{ env.Z3_GIT_TAG }}-${{ hashFiles('**/ci.yml') }}
      - name: Install FLINT2
        if: steps.cache-flint2.outputs.cache-hit != 'true'
        run: |
          ${{ matrix.config.mpfr-install-cmd}}
          git clone --branch trunk --depth 1 https://github.com/wbhart/flint2.git
          cmake -S flint2 -B flint2/build -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
          cd flint2/build && make -j4
          echo "LD_LIBRARY_PATH=lib/:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          cd ..
          ls
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Configure CMake
        run: |
          echo "${{ env.LD_LIBRARY_PATH }}"
          export LD_LIBRARY_PATH=$(echo "${{ env.LD_LIBRARY_PATH }}")
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_QECC_TESTS=ON -DBINDINGS=ON ${{ matrix.config.toolchain }}
      - name: Build
        run: cmake --build build --config Release
      - name: Test
        working-directory: ${{ matrix.config.test-dir }}
        run: ctest -C Release --output-on-failure
      - if: runner.os == 'Linux'
        name: Coverage
        run: |
          cmake -S . -B buildCov -DCMAKE_BUILD_TYPE=Debug -DBUILD_QECC_TESTS=ON -DBINDINGS=ON -DCOVERAGE=ON
          cmake --build buildCov --config Debug --target qecc_test
          cd buildCov/test
          ctest -C Debug --output-on-failure
      - if: runner.os == 'Linux'
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          gcov: true
          gcov_ignore: "extern/**/*"